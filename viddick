#!/bin/bash
programName=$0

#config
destinationPrefix="/mount/server"
destinationFolder="uploads"
hostPrefix="https://host.foo"
destinationFile=""

function usage() {
  echo "viddick - chronicles of a capture program"
  echo ""
  echo "This is a tool to quickly take and share screenshots, videos"
  echo "and other files. It uses escrotum for the capturing and simply"
  echo "moves the file to a specified location on a webserver and echos"
  echo "the generated url"
  echo ""
  echo "COPYRIGHT:"
  echo "  Code is under the MIT License and written by Zod-"
  echo "  Idea for the name by Muxgux"
  echo ""
  echo "USAGE:"
  echo "  viddick [OPTION] [FILE]"
  echo ""
  echo "OPTIONS:"
  echo "  -a, --all     capture the entire desktop (default)"
  echo "  -s, --select  select an area or application to capture"
  echo "  -r, --record  record a video instead of taking a screenshot"
  echo "                call this again to stop recording"
  echo "  -d, --dialog  upload a specific file choosen with zenity file dialog"
  echo "  -m, --move    delete the local file after copying"
  echo "  -x, --xclip   copy the result into the clipboard after uploading"
  echo "  -n, --notify  show a notification with the result url"
  echo ""
  echo "  -h, --help    displays this"
  echo ""
  echo "FILE:"
  echo "  FILE          direct path of a file to upload"
}

echoerr() { cat <<< "$programName: $@" 1>&2; }
trim() { sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*\$//g' "$@"; }

selectOpt=false
selectOpts=""

dialogOpt=false
fileOpt=""
fileOpts=""

recordOpt=false
recordOpts=""

moveOpt=false
xclipOpt=false
notifyOpt=false

function incompatible() {
  echoerr "incompatible options: '$1' and '$2'"
  exit 1
}

function addSelectOpt() {
  if [ -n "$selectOpts" ]; then
    incompatible $selectOpts $1
  elif [ -n "$fileOpts" ]; then
    incompatible $fileOpts $1
  fi
  selectOpts=`echo "$selectOpts $1" | trim`
}

function addRecordOpt() {
  if [ -n "$fileOpts" ]; then
    incompatible $fileOpts $1
  fi
  recordOpts=`echo "$recordOpts $1" | trim`
}

function addFileOpt() {
  if [ -n "$selectOpts" ]; then
    incompatible $selectOpts $1
  elif [ -n "$fileOpts" ]; then
    incompatible $fileOpts $1
  elif [ -n "$recordOpts" ]; then
    incompatible $recordOpts $1
  fi
  fileOpts=`echo "$fileOpts $1" | trim`
}

for opt in "$@"; do
  case "$opt" in
    "-a"|"--all")
      addSelectOpt "$opt"
    ;;
    "-s"|"--select")
      selectOpt=true
      addSelectOpt "$opt"
    ;;
    "-r"|"--record")
      recordOpt=true
      addRecordOpt "$opt"
    ;;
    "-d"|"--dialog")
      dialogOpt=true
      addFileOpt "$opt"
    ;;
    "-m"|"--move")
      moveOpt=true
    ;;
    "-x"|"--xclip")
      xclipOpt=true
    ;;
    "-n"|"--notify")
      notifyOpt=true
    ;;
    "-h"|"--help")
      usage
      exit 0
    ;;
    -*)
      echoerr "unrecognized option $opt"
      exit 1
    ;;
    *)
      fileOpt="$opt"
      addFileOpt "$opt"
    ;;
  esac
done

filename=""
if [ -n "$fileOpts" ]; then
  if [ "$dialogOpt" = true ]; then
    filename=$(zenity --file-selection)
  else
    filename="$fileOpt"
  fi
else
  escrotumOptions=""
  if [ "$selectOpt" = true ]; then
    escrotumOptions="$escrotumOptions -s"
  fi
  if [ "$recordOpt" = true ]; then
    if [ -e "/tmp/escrotum_recording.pid" ]; then
      #stop recording
      kill -SIGINT "$(cat /tmp/escrotum_recording.pid)"
      exit 0
    fi
    escrotumOptions="$escrotumOptions -r -t 4"
  fi
  filename="$(escrotum $escrotumOptions)"
fi

function uploadFile() {
  file="$1"

  if [ -z "$destinationFile" ]; then
    destinationFile=$(basename "$file")
  else
    base=$(basename "$file")
    extension="${base##*.}"
    destinationFile="$destinationFile.$extension"
  fi

  #/mount/server/uploads
  localFolder="$destinationPrefix/$destinationFolder"
  #/mount/server/uploads/filename
  destination="$destinationPrefix/$destinationFolder/$destinationFile"
  #https://host.foo/uploads/filename
  url="$hostPrefix/$destinationFolder/$destinationFile"

  if [ -z "$file" ]; then
    echoerr "No file specified"
    exit 1
  elif [ ! -f "$file" ]; then
    echoerr "Upload cancelled"
    exit 1
  fi

  if mkdir -p "$localFolder" && cp "$file" "$destination"; then
    echo "$url"
    if [ "$notifyOpt" = true ]; then
      notify-send -i "go-up" "viddick complete" "$url"
    fi
    if [ "$moveOpt" = true ]; then
      rm "$file"
    fi
  fi
}

output=$(uploadFile "$filename")
if [ -n "$output" ]; then
  if [ "$xclipOpt" = true ]; then
    echo "$output" | xclip -selection "clipboard"
  else
    echo "$output"
  fi
fi
